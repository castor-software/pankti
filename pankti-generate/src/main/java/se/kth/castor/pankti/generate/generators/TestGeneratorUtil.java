package se.kth.castor.pankti.generate.generators;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier;
import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
import com.thoughtworks.xstream.io.xml.XppReader;
import org.xmlpull.mxp1.MXParser;
import se.kth.castor.pankti.generate.parsers.InstrumentedMethod;
import se.kth.castor.pankti.generate.serializers.ISerializer;
import se.kth.castor.pankti.generate.serializers.impl.GSONSerializer;
import se.kth.castor.pankti.generate.serializers.impl.XStreamSerializer;
import spoon.reflect.code.CtExpression;
import spoon.reflect.code.CtLocalVariable;
import spoon.reflect.code.CtStatement;
import spoon.reflect.factory.Factory;
import spoon.reflect.reference.CtTypeReference;

import java.io.File;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestGeneratorUtil {
    public CtLocalVariable<String> addStringVariableToTestMethod(Factory factory, String fieldName, String fieldValue) {
        fieldValue = fieldValue.replaceAll("\\n", "\" +\n\"");
        CtExpression<String> variableExpression = factory.createCodeSnippetExpression(
                "\n\"" + fieldValue + "\""
        );
        return factory.createLocalVariable(
                factory.createCtTypeReference(String.class),
                fieldName,
                variableExpression
        );
    }

    public CtLocalVariable<?> addClassLoaderVariableToTestMethod(Factory factory) {
        CtExpression<String> variableExpression = factory.createCodeSnippetExpression(
                "getClass().getClassLoader()"
        );
        return factory.createLocalVariable(
                factory.createCtTypeReference(ClassLoader.class),
                "classLoader",
                variableExpression
        );
    }

    public List<CtStatement> addScannerVariableToTestMethod(Factory factory, String fileName, String type) {
        type = type.substring(0, 1).toUpperCase() + type.substring(1);
        String fileVariableName = "file" + type;
        String scannerVariableName = "scanner" + type;
        List<CtStatement> fileAndScannerStatements = new ArrayList<>();
        // Create file
        CtExpression<String> fileVariableExpression = factory.createCodeSnippetExpression(
                "new File(classLoader.getResource(\"" + fileName + "\").getFile())"
        );
        CtLocalVariable<?> fileVariable = factory.createLocalVariable(
                factory.createCtTypeReference(File.class),
                fileVariableName,
                fileVariableExpression);
        // Create scanner
        CtExpression<String> scannerVariableExpression = factory.createCodeSnippetExpression(
                "new Scanner(" + fileVariableName + ")"
        );
        CtLocalVariable<?> scannerVariable = factory.createLocalVariable(
                factory.createCtTypeReference(Scanner.class),
                scannerVariableName,
                scannerVariableExpression
        );
        fileAndScannerStatements.add(fileVariable);
        fileAndScannerStatements.add(scannerVariable);
        return fileAndScannerStatements;
    }

    public CtLocalVariable<String> readStringFromScanner(Factory factory, String type) {
        String scannerVariableName = "scanner" + type.substring(0, 1).toUpperCase() + type.substring(1);;
        String xmlVariableName = type + "XML";
        CtExpression<String> variableExpression = factory.createCodeSnippetExpression(
                scannerVariableName + ".useDelimiter(\"\\\\A\").next()"
        );
        return factory.createLocalVariable(
                factory.createCtTypeReference(String.class),
                xmlVariableName,
                variableExpression
        );
    }

    public String findObjectBoxType(CtTypeReference typeReference) {
        if (typeReference.isPrimitive())
            return typeReference.box().getSimpleName();
        else return typeReference.getQualifiedName().replaceAll("\\$", ".");
    }

    // Gets method param list as _param1,param2,param3
    public String getParamListPostFix(InstrumentedMethod instrumentedMethod) {
        return  "_" + String.join(",", instrumentedMethod.getParamList());
    }


    /**
     * This method transforms a xml object string generated by xStream to a json string.
     * The json string should be able to be deserialized to the object by xStream+JettisonMappedXmlDriver
     * (Because the transformation follows the same format that xStream does)
     * @param objectStr the serialized object string in xml
     * @return the identical json string
     */
    public String transformXML2JSON (String objectStr) {
        HierarchicalStreamReader sourceReader = new XppReader(new StringReader(objectStr), new MXParser());

        StringWriter buffer = new StringWriter();
        JettisonMappedXmlDriver jettisonDriver = new JettisonMappedXmlDriver();
        HierarchicalStreamWriter destinationWriter = jettisonDriver.createWriter(buffer);

        HierarchicalStreamCopier copier = new HierarchicalStreamCopier();
        copier.copy(sourceReader, destinationWriter);

        return buffer.toString();
    }

    /**
     * Transform the xml string of a serialized object by xStream into another serializer's format, e.g., a json string
     * @param objectStr The xml string generated by xStream
     * @param serializer The serializer to be used
     * @param classfiles A list of File that contains the classes of the target project (without which xStream cannot
     *                   deserialize the xml string first)
     * @return
     */
    public String transformObjectStrings (String objectStr, ISerializer serializer, List<File> classfiles) {
        if (objectStr.equals("")) { return objectStr; }

        String result = null;

        if (serializer instanceof XStreamSerializer) {
            result = objectStr;
        } else {
            // deserialize the string using xStream
            ClassLoader cl = null;
            try {
                List<URL> urls = new ArrayList<URL>();
                for (File file : classfiles) {
                    urls.add(file.toURI().toURL());
                }
                cl = new URLClassLoader(urls.toArray(new URL[urls.size()]));
            } catch (MalformedURLException e) {
            }

            XStream xStream = new XStream();
            xStream.setClassLoader(cl);
            Object object = xStream.fromXML(objectStr);

            // serialize the object into the target format
            result = serializer.serializeObjectToString(object);
        }

        return result;
    }
}